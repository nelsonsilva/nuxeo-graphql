scalar Date
scalar JSON
scalar JSONObject

directive @alias(
  to: String
) on FIELD_DEFINITION

directive @enricher(
  name: String
  field: String
) on FIELD_DEFINITION

input PaginationArguments {
  currentPageIndex: Int
  pageSize: Int
  offset: Int
}

type TaskAction {
  name: String
  url: String
  label: String
  validate: Boolean
}

type TaskInfo {
  allowTaskReassignment: Boolean
  taskActions: [TaskAction]
}

type Task {
  id: ID
  name: String
  workflowInstanceId: String
  workflowModelName: String
  workflowInitiator: String
  workflowTitle: String
  workflowLifeCycleState: String
  graphResource: String
  state: String
  directive: String
  created: Date
  dueDate: Date
  nodeName: String
  targetDocumentIds: [Document] # @fetcher(name: "task", field: "targetDocumentIds")
  actors: [User] # @fetcher(name: "task", field: "actors")
  delegatedActors: [User]
  comments: [String]
  variables: JSONObject
  taskInfo: TaskInfo
}

type Query {
  document(id: ID, path: String): Document
  search(provider: String, query: String, params: JSONObject, queryParams: [String], pagination: PaginationArguments): Results
  nxql(nxql: String, pagination: PaginationArguments): Results
  tasks(params: JSONObject, pagination: PaginationArguments): Results
  notes: [Note]
}

type Rendition {
  name: String
  kind: String
  icon: String
  url: String
}

union Pageable = Document | Task

type Results {
  isPaginable: Boolean
  resultsCount: Int
  pageSize: Int
  maxPageSize: Int
  resultsCountLimit: Int
  currentPageSize: Int
  currentPageIndex: Int
  currentPageOffset: Int
  numberOfPages: Int
  isPreviousPageAvailable: Boolean
  isNextPageAvailable: Boolean
  isLastPageAvailable: Boolean
  isSortable: Boolean
  hasError: Boolean
  errorMessage: String
  totalSize: Int
  pageIndex: Int
  pageCount: Int
  entries: [Pageable]
}

input Enrichers {
  document: [String]
  blob: [String]
}

type Document {
  uid: ID
  path: String
  title: String
  repository: String
  state: String
  type: String
  parentRef: String
  isCheckedOut: Boolean
  isRecord: Boolean
  retainUntil: Date
  hasLegalHold: Boolean
  isUnderRetentionOrLegalHold: Boolean
  isVersion: Boolean
  isProxy: Boolean
  changeToken: String
  isTrashed: Boolean
  lastModified: Date
  facets: [String]

  # enrichers
  audit: [String]
  breadcrumb: [Document]
  collections: [Document]
  firstAccessibleAncestor: Document
  hasContent: Boolean
  isFavorite: Boolean
  pendingTasks: [String]
  permissions: [String]
  renditions: [Rendition]
  runnableWorkflows: [String]
  runningWorkflows: [String] 
  subscribedNotifications: [String]
  subtypes: [String]
  tags: [String]
  thumbnail: String # @enricher(name: "thumbnail", field: "url")

  # compat
  properties(schemas: [String]): JSONObject
  contextParameters(enrichers: Enrichers): JSONObject
}

type Note {
  title: String
  content: String @alias(to: "note:note")
  mimetype: String @alias(to: "note:mime_type")
  creator: String @alias(to: "dc:creator")
  created: Date @alias(to: "dc:created")
  isTrashed: Boolean
  lastModified: Date

  isFavorite: Boolean #@ enricher(name: "favorites", field: "isFavorite")
  tags: [String]
  thumbnail: String
}

type AuditEvent {
  source: String
  name: String
  category: String
  docId: String
  repository: String
  principalName: String
  docLifeCycle: String
  docType: String
  docPath: String
  comment: String
  eventDate: Date
  logDate: Date
  eventId: String
  document: Document
}

type Subscription {
  documentCreated: AuditEvent
  documentModified: AuditEvent
  documentTrashed: AuditEvent
}
